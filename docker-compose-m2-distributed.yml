services:
  # API Gateway 제거 (포트 3000 충돌 방지)
  # api-gateway:
  #   build: 
  #     context: .
  #     dockerfile: Dockerfile.gateway
  #   container_name: sayit-gateway-m2
  #   restart: unless-stopped
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - NODE_ENV=production
  #     - REDIS_HOST=redis-cluster
  #     - WORKER_NODES=worker-1,worker-2,worker-3
  #     - PLATFORM=arm64
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 1G
  #         cpus: '1'
  #       reservations:
  #         memory: 512M
  #         cpus: '0.5'
  #   networks:
  #     - sayit-network
  #   depends_on:
  #     - redis-cluster
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  # Whisper 워커 1 (큐 처리 전용)
  whisper-worker-1:
    build: 
      context: .
      dockerfile: Dockerfile.m2
    container_name: sayit-worker-1-m2
    restart: unless-stopped
    environment:
      - WORKER_ID=Worker-1
      - REDIS_HOST=redis-cluster
      - MAX_CONCURRENT_CHUNKS=2  # ✅ small 모델 적용으로 3→2 (안정성 확보)
      - PLATFORM=arm64
      - PYTORCH_ENABLE_MPS_FALLBACK=1
      - OMP_NUM_THREADS=3        # ✅ small 모델 적용으로 2→3 (성능 향상)
      - WORKER_MODE=queue_only  # 큐 처리 전용
      - CONTAINER_NAME=Worker-1
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2'
        reservations:
          memory: 2G
          cpus: '1'
    volumes:
      - ./uploads:/app/uploads
      - ./temp:/app/temp
      - ./services:/app/services          # ✅ 소스 코드 마운트 추가
      - ./routes:/app/routes              # ✅ 라우트 마운트 추가
      - whisper_cache_1:/tmp/whisper
    networks:
      - sayit-network
    depends_on:
      - redis-cluster

  # Whisper 워커 2 (큐 처리 전용)
  whisper-worker-2:
    build: 
      context: .
      dockerfile: Dockerfile.m2
    container_name: sayit-worker-2-m2
    restart: unless-stopped
    environment:
      - WORKER_ID=Worker-2
      - REDIS_HOST=redis-cluster
      - MAX_CONCURRENT_CHUNKS=2  # ✅ small 모델 적용으로 3→2 (안정성 확보)
      - PLATFORM=arm64
      - PYTORCH_ENABLE_MPS_FALLBACK=1
      - OMP_NUM_THREADS=3        # ✅ small 모델 적용으로 2→3 (성능 향상)
      - WORKER_MODE=queue_only  # 큐 처리 전용
      - CONTAINER_NAME=Worker-2
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2'
        reservations:
          memory: 2G
          cpus: '1'
    volumes:
      - ./uploads:/app/uploads
      - ./temp:/app/temp
      - ./services:/app/services          # ✅ 소스 코드 마운트 추가
      - ./routes:/app/routes              # ✅ 라우트 마운트 추가
      - whisper_cache_2:/tmp/whisper
    networks:
      - sayit-network
    depends_on:
      - redis-cluster

  # Whisper 워커 3 (큐 처리 전용)
  whisper-worker-3:
    build: 
      context: .
      dockerfile: Dockerfile.m2
    container_name: sayit-worker-3-m2
    restart: unless-stopped
    environment:
      - WORKER_ID=Worker-3
      - REDIS_HOST=redis-cluster
      - MAX_CONCURRENT_CHUNKS=2  # ✅ small 모델 적용으로 3→2 (안정성 확보)
      - PLATFORM=arm64
      - PYTORCH_ENABLE_MPS_FALLBACK=1
      - OMP_NUM_THREADS=3        # ✅ small 모델 적용으로 2→3 (성능 향상)
      - WORKER_MODE=queue_only  # 큐 처리 전용
      - CONTAINER_NAME=Worker-3
    deploy:
      resources:
        limits:
          memory: 3G
          cpus: '2'
        reservations:
          memory: 1.5G
          cpus: '1'
    volumes:
      - ./uploads:/app/uploads
      - ./temp:/app/temp
      - ./services:/app/services          # ✅ 소스 코드 마운트 추가
      - ./routes:/app/routes              # ✅ 라우트 마운트 추가
      - whisper_cache_3:/tmp/whisper
    networks:
      - sayit-network
    depends_on:
      - redis-cluster

  # Direct Backend (API 서비스만, 큐 처리 제외)
  direct-backend:
    build: 
      context: .
      dockerfile: Dockerfile.m2
    container_name: sayit-direct-backend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - WORKER_ID=Direct-Backend
      - REDIS_HOST=redis-cluster
      - MAX_CONCURRENT_CHUNKS=4  # ✅ small 모델 적용으로 5→4 (메모리 여유 확보)
      - PLATFORM=arm64
      - PYTORCH_ENABLE_MPS_FALLBACK=1
      - OMP_NUM_THREADS=4
      - WORKER_MODE=api_only
      - CONTAINER_NAME=Direct-Backend
      - QUEUE_PROCESSING=false
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2'
        reservations:
          memory: 2G
          cpus: '1'
    volumes:
      - ./uploads:/app/uploads
      - ./temp:/app/temp
      - ./services:/app/services
      - ./routes:/app/routes
      - ./server.js:/app/server.js              # ✅ server.js 마운트 추가
      - ./middleware:/app/middleware            # ✅ middleware 마운트 추가
      - ./package.json:/app/package.json        # ✅ package.json 마운트 추가
      - whisper_cache_direct:/tmp/whisper
    networks:
      - sayit-network
    depends_on:
      - redis-cluster

  # Redis 클러스터 (M2 최적화)
  redis-cluster:
    image: redis:7-alpine
    container_name: sayit-redis-m2
    restart: unless-stopped
    ports:
      - "6379:6379"
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1'
        reservations:
          memory: 1G
          cpus: '0.5'
    volumes:
      - redis_data:/data
    networks:
      - sayit-network
    command: redis-server --maxmemory 1536mb --maxmemory-policy allkeys-lru --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 모니터링
  monitoring:
    image: prom/node-exporter:latest
    container_name: sayit-monitoring
    restart: unless-stopped
    ports:
      - "9100:9100"
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
    networks:
      - sayit-network

volumes:
  redis_data:
  whisper_cache_1:
  whisper_cache_2:
  whisper_cache_3:
  whisper_cache_direct:  # ✅ direct-backend용 캐시 추가

networks:
  sayit-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16 